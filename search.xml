<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[机械硬盘写入性能分析]]></title>
      <url>%2F2017%2F04%2F24%2Fhard-disk-io%2F</url>
      <content type="text"><![CDATA[现在SSD越来越普遍了，貌似现在写这个有点晚了。但是，在一些大批量写入的场景下，机械硬盘的性价比还是比较突出的。或许有一天，机械硬盘会和软盘一样被遗弃，成为历史。 机械硬盘工作原理物理结构 特性在老式的机械硬盘中，每个磁道上的扇区数相同，也就是内侧（靠近转轴）磁道上的扇区较短（密集），而外侧磁道上的扇区较长（稀疏）。这样的优点是寻址（seek）时方便，缺点时浪费空间，因为外侧磁道上可以存放更多的扇区。所以，在新式的机械硬盘中，外侧磁道上的扇区数比内侧的多。也就使得外侧磁道上读写速度大于内侧磁道。 写入性能 磁盘寻道 系统调用 内存拷贝 队列深度 BLOCK SIZE CHACHE 文件系统 Linux系统分用户空间和内核空间，一次写入操作需要把用户空间的数据通过系统调用拷贝到内核空间，再由内核调度写入磁盘。一般系统调用和内存拷贝都需要消耗较多的CPU时间。 IO模型阻塞 I/O 典型的阻塞式I/O就是直接通过write系统调用写数据。 非阻塞 I/O 非阻塞式I/O和阻塞式I/O的区别就是，非阻塞式I/O的请求会立即返回，而不必等待写入操作完成再返回。 同步 I/O异步 I/O 在Linux系统上有POSIX AIO和libaio两种异步I/O方式。POSIX AIO是一个在多个线程中执行正常阻塞I / O的用户级实现,因此给出了I / O是异步的错觉。Libaio是异步I / O操作的内核支持，其中io请求实际上在内核中排队，根据您拥有的磁盘调度程序排序, (使用TCQ或NCQ)作为异步操作转发(以某种最佳顺序希望)到实际磁盘。所以从性能的角度考虑，libaio更好一些。 写入方式fwrite更加通用的方式，通过在用户空间准备缓冲区，减少系统调用。这种做法一般情况下都会有不错的性能表现。但在高速写入的场景下CPU会成为瓶颈，因为多做了一次内存拷贝。 mmap将用户空间和内核空间做映射，以减少内存拷贝。而且特别适合随机读写。 DIO绕过内核缓冲区，直接写入磁盘的方式。这是一把双刃剑，使用起来比较麻烦，而且处理不当的话反而会更慢。 AIO配合DIO可以达到最大性能。 测试与监控工具iostat比较专业的系统I/O观测工具。排队论 iotop类似于top命令，方便观测实时I/O速度。 dd简单的写入性能测试工具。 fio可以测试硬盘的极限性能。 极限写入性能使用DIO + AIO + 多线程的方式可以达到极限性能。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[git 简洁提交——合并多个commit]]></title>
      <url>%2F2017%2F04%2F10%2Fgit-squash%2F</url>
      <content type="text"><![CDATA[本地开发，服务器上编译、运行。 多台电脑间同步代码 不放心本地，为了备份经常push到代码服务器上。 因为以上等原因，我需要经常执行git commit，这就导致git的历史中包含很多无效的提交。简洁的git log和工整的代码同样重要，所以我需要合并多个commit。 简洁提交1234git checkout mastergit merge --squash featuregit commitgit push squash命令可以将整个feature分支压缩为master分支上的一个commit。 下面这条命令也可以达到类似的效果：1git merge --no-ff --no-commit 但还是有一点细微的差别，请参考这里。 修改提交历史1git rebase -i HEAD~5 -i, –interactive表示使用“交互式”的方法修改。这个命令会列出最近5个commit。大致如下： 123456789101112131415161718192021222324pick 6e53cd0 updatepick 446e6ce updatepick b1ec2c4 updatepick 366dfac updatepick 04bf27b for clear script# Rebase 574d47f..04bf27b onto 574d47f (5 command(s))## Commands:# p, pick = use commit# r, reword = use commit, but edit the commit message# e, edit = use commit, but stop for amending# s, squash = use commit, but meld into previous commit# f, fixup = like &quot;squash&quot;, but discard this commit&apos;s log message# x, exec = run command (the rest of the line) using shell# d, drop = remove commit## These lines can be re-ordered; they are executed from top to bottom.## If you remove a line here THAT COMMIT WILL BE LOST.## However, if you remove everything, the rebase will be aborted.## Note that empty commits are commented out 将pick改squash或fixup就可以将对应的commit合并到前一个commit中。区别是squash会保留commit message而fixup不会。 12345pick 6e53cd0 updatef 446e6ce updatef b1ec2c4 updatef 366dfac updatepick 04bf27b for clear script 保存退出后就会生效。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[一个程序员的Mac环境配置]]></title>
      <url>%2F2017%2F03%2F08%2Fmac-setup%2F</url>
      <content type="text"><![CDATA[第一篇博客，就从环境配置开始写起吧。大学时靠父母有了人生第一台笔记本，配置还不如现在的手机，但足以满足我对电脑的好奇。从XP开始，到Ubuntu，再到现在的Mac。Mac不仅“秀外”而且“慧中”。能让我在写一天代码之后感到身心愉悦。 翻墙我现在用的是轻云，用起来很舒服，但是就快停止服务了。请诸位各显神通，不过还是推荐付费的方式，它会为你节省很多时间。时间就是金钱。 推荐软件HomeBrewHomeBrew 是macOS 不可或缺的套件管理器。类似与yum、apt-get等。 iTerm2iTerm2 is a terminal emulator for macOS that does amazing things.macOS上最好的终端了。 “Oh My ZSH!”“Oh My ZSH!” Your terminal never felt this good before.私人使用时可以用zsh替代bash Dropbox我私人的Mac需要和公司的Mac同步配置文件等。以前都用github保存配置文件，但每次都要push和pull，好烦。用了Dropbox后，感觉两台电脑可以无缝切换，自动同步文件。 spacemacs传言“vim是编辑器之神，emacs是神的编辑器”。而spacemacs这是emacs之上的vim，集合了二者的优点。 之前用vim，是vim让我放弃了eclipse。但是vim用久了感觉有些焦躁，插件装多了会很慢。我现在用spacemacs，用两个词形容就是行云流水，思行合一。不是说vim不好，spacemacs也是吸纳了vim的优点。 tmuxtmux is a terminal multiplexer. 我做服务端开发，线上线下服务器，每天同时活跃的ssh登录有几十个。tmux可以让我快速的在窗口之间跳跃（一个iTerm2窗口打开9个tab，每个tab中的tmux又可以打开10个tmux的tab，90个tab间切换的时间复杂度为O(1)，足够满足我的需求了）。而且可以保持登录的session。白天用公司的Mac工作，晚上到家，打开自己的Mac可以继续服务器上的session工作。节省了很多时间，而且让我更专注于工作内容，让人心情愉悦。 AlfredAlfred is an award-winning app for Mac OS X which boosts your efficiency with hotkeys, keywords, text expansion and more. Search your Mac and the web, and be more productive with custom actions to control your Mac. 通过指令快速的在程序之间切换。现在macOS自带的Spotlight也不错。 VirtualBox虚拟机没什么好的了。macOS虽然是类Unix内核，但还是和Linux有很大区别的。装虚拟机就为了做开发或者实验环境。虚拟机上配置双网卡，一个用来访问外网，一个用来和macOS通信。开启ssh服务，共享文件等设置，物理机和虚拟机傻傻分不清楚，有事我真的觉得我的Mac可以做Linux开发。 gitgit不只可以管理代码，也可以管理文档，配置文件等。新手推荐廖雪峰的git教程。 使用习惯 Mac的键盘和触摸板要比外接的键盘鼠标更高效。 尽量使用快捷键。 后台可以跑很多进程，但要尽量隐藏不关心的内容，以免分散注意力和精力。 重复性的工作可以考虑写脚本来完成。 KISS原则：Keep It Simple, Stupid。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>%2F2015%2F07%2F20%2Fhello-world%2F</url>
      <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
    </entry>

    
  
  
</search>
